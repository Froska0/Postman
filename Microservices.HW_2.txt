ЗАДАНИЕ:

Check if everything is normal in the web services:
WS_1 http://23.88.52.139:5041
acts as a proxy from the client, all client requests go through it
WS_2 http://23.88.52.139:5042
list of all job applications
WS_3 http://23.88.52.139:5043
list of skills
WS_4 http://23.88.52.139:5044
position list
WS_5 http://23.88.52.139:5045
list of departments

I. View lists:
	1) Method: GET; Endpoint: WS_1/all_jobs -->
	   Method: GET; Endpoint: WS_2/get_all_jobs

	2) Method: GET; Endpoint: WS_1/get_skills -->
	   Method: GET; Endpoint: WS_3/get_tech_skills_list

	3) Method: GET; Endpoint: WS_1/get_positions -->
	   Method: GET; Endpoint: WS_4/get_positions_list

	4) Method: GET; Endpoint: WS_1/get_departments -->
	   Method: GET; Endpoint: WS_4/get_departments_list 
	  
II. Create job:
	1) Method: POST; Endpoint: WS_1/create_job -->
		body: JSON: {"department": department_id,
			     "position": position_id,
			     "skills": [skill_id, skill_id, ..., skill_id]}

	   Method: POST; Endpoint: WS_2/create_job_position  -->
		body: JSON: {"department": department_id,
			     "position": position_id,
			     "skills": [skill_id, skill_id, ..., skill_id]}

	   Method: POST; Endpoint: WS_3/skill_config  -->
		body: JSON: {"skill_ids": [skill_id, skill_id, ..., skill_id]}

	   Method: POST; Endpoint: WS_4/position_config  -->
		body: JSON: {"position_id": position_id}

	   Method: POST; Endpoint: WS_5/department_config  -->
		body: JSON: {"department_id": department_id}

III. You can find logs on server in w1.log


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

РЕШЕНИЕ:


РЕШЕНИЕ:
(см. файл "**" HW_2, запросы **) 

1. Отправляем методом GET запрос на WS_1/all_jobs
Никаких параметров не нужно

Получаем ответ: 

{
    "1": {
        "department": "Cognizant Technology Solutions",
        "position": "QA Functional Tester",
        "skills": [
            "postman",
            "js",
            "client_server",
            "api_testing"
        ]
    },
...
...
    "19": {
        "department": "Development Department",
        "position": "QA automation middle",
        "skills": [
            "Java",
            "Automation",
            "Functional testing"
        ]
    }
}

2. Сравниваем с ожидаемым результатом, видим, что всё отлично.
Отправляем методом GET запрос на WS_2/get_all_jobs
Никаких параметров не нужно

Получаем ответ: 

{
    "1": {
        "department": "Cognizant Technology Solutions",
        "position": "QA Functional Tester",
        "skills": [
            "postman",
            "js",
            "client_server",
            "api_testing"
        ]
    },
...
...
    "19": {
        "department": "Development Department",
        "position": "QA automation middle",
        "skills": [
            "Java",
            "Automation",
            "Functional testing"
        ]
    },
}

3. Сравниваем с ожидаемым результатом, сравниваем с ответом из предыдущего запроса, видим, что всё отлично.
Отправляем методом GET запрос на WS_1/get_skills
Никаких параметров не нужно

Получаем ответ: 

{
    "skills": {
        "1": "Java",
        "10": "Load testing",
        "11": "Web client testing",
        "12": "Traffic sniffing",
        "2": "JS",
        "3": "Postman",
        "4": "Automation",
        "5": "Jenkins",
        "6": "Functional testing",
        "7": "Web services testing",
        "8": "Mobile testing",
        "9": "QA documentation"
    }
}

4. Сравниваем с ожидаемым результатом, видим, что всё отлично.
Отправляем методом GET запрос на WS_3/get_tech_skills_list
Никаких параметров не нужно

Получаем ответ: 

{
    "skills": {
        "1": "Java",
        "10": "Load testing",
        "11": "Web client testing",
        "12": "Traffic sniffing",
        "2": "JS",
        "3": "Postman",
        "4": "Automation",
        "5": "Jenkins",
        "6": "Functional testing",
        "7": "Web services testing",
        "8": "Mobile testing",
        "9": "QA documentation"
    }
}

5. Сравниваем с ожидаемым результатом, сравниваем с ответом из предыдущего запроса, видим, что всё отлично.
Отправляем методом GET запрос на WS_1/get_positions
Никаких параметров не нужно

Получаем ответ: 

{
    "positions": {
        "1": "QA automation junior",
        "10": "QA Lead",
        "11": "QA Manager",
        "12": "Mobile QA",
        "2": "QA automation middle",
        "3": "QA automation senior",
        "4": "QA functional junior",
        "5": "QA functional middle",
        "6": "QA functional senior",
        "7": "QA Load junior",
        "8": "QA Load middle",
        "9": "QA Load senior"
    }
}

6. Сравниваем с ожидаемым результатом, видим, что всё отлично.
Отправляем методом GET запрос на WS_4/get_positions_list
Никаких параметров не нужно

Получаем ответ: 

{
    "positions": {
        "1": "QA automation junior",
        "10": "QA Lead",
        "11": "QA Manager",
        "12": "Mobile QA",
        "2": "QA automation middle",
        "3": "QA automation senior",
        "4": "QA functional junior",
        "5": "QA functional middle",
        "6": "QA functional senior",
        "7": "QA Load junior",
        "8": "QA Load middle",
        "9": "QA Load senior"
    }
}

7. Сравниваем с ожидаемым результатом, сравниваем с ответом из предыдущего запроса, видим, что всё отлично.
Отправляем методом GET запрос на WS_1/get_departments
Никаких параметров не нужно

Получаем ответ: 

{
    "departments": {
        "1": "IT Department",
        "2": "QA Department",
        "3": "Development Department",
        "4": "HR Department",
        "5": "Load Department",
        "6": "Design Department",
        "7": "Education Department"
    }
}

8. Сравниваем с ожидаемым результатом, видим, что всё отлично.
Отправляем методом GET запрос на WS_5/get_departments_list
Никаких параметров не нужно

Получаем ответ: 

{
    "departments": {
        "1": "IT Department",
        "2": "QA Department",
        "3": "Development Department",
        "4": "HR Department",
        "5": "Load Department",
        "6": "Design Department",
        "7": "Education Department"
    }
}

9. Сравниваем с ожидаемым результатом, сравниваем с ответом из предыдущего запроса, видим, что всё отлично.

10. Теперь проверим создание заявки.
Отправляем методом POST запрос на WS_1/create_job
 		body: JSON: {"department": 7,
			     "position": 12,
			     "skills": [1, 2, 11, 12]}

Получаем ответ:

{
    "created_position": {
        "department": "Education Department",
        "position": "Mobile QA",
        "skills": [
            "Java",
            "JS",
            "Web client testing",
            "Traffic sniffing"
        ]
    }
}

11.  Сравниваем с ожидаемым результатом, проверяем соответствие с ответами из запросов 3, 5, 7.
Видим, что всё отлично.
Проверяем, добавилась ли заявка в список всех вакансий (отправляем заново запросы 1 и 2).

Получаем ответ:

...
...
    "20": {
        "department": "Education Department",
        "position": "Mobile QA",
        "skills": [
            "Java",
            "JS",
            "Web client testing",
            "Traffic sniffing"
        ]
    },

12. Сравниваем с ожидаемым результатом, сравниваем с ответом из предыдущего запроса, видим, что всё отлично.
Попробуем отправить запрос из пункта 10 с невалидными данными. Проверим department": 8, "position": 13, "skills": 13

Во всех случаях получен ответ:

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or
	there is an error in the application.</p>

13. Значит, количество скилов, позиций и департаментов указано верно.
Отправляем методом POST запрос на WS_2/create_job_position
 		body: JSON: {"department": 7,
			     "position": 12,
			     "skills": [1, 2, 11, 12]}			     
			     
Получаем ответ:

{
    "created_position": {
        "department": "Education Department",
        "position": "Mobile QA",
        "skills": [
            "Java",
            "JS",
            "Web client testing",
            "Traffic sniffing"
        ]
    }
}

14. Сравниваем с ответом из пункта 10. Проверяем, добавилась ли заявка в список всех вакансий (отправляем заново запросы 1 и 2). Проверяем невалидные данные: department": 8, "position": 13, "skills": 13. 

Получаем ответ (для валидных данных):

...
...
    "21": {
        "department": "Education Department",
        "position": "Mobile QA",
        "skills": [
            "Java",
            "JS",
            "Web client testing",
            "Traffic sniffing"
        ]
    },

Получаем ответ (для невалидных данных):

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or
	there is an error in the application.</p>

Видим, что всё отлично.

15. Отправляем методом POST запрос на WS_3/skill_config
		body: JSON: {"skill_ids": [1, 2, 11, 12]}

Получаем ответ:

{
    "skills_list": [
        "Java",
        "JS",
        "Web client testing",
        "Traffic sniffing"
    ]
}

Сравниваем с ответом из пунктов 3 и 10. Видим, что всё хорошо.

16. Отправляем методом POST запрос на WS_4/position_config
		body: JSON: {"position_id": 12}

Получаем ответ:

{
    "position_title": "Mobile QA"
}

Сравниваем с ответом из пунктов 5 и 10. Видим, что всё хорошо.

17. Отправляем методом POST запрос на WS_5/department_config
		body: JSON: {"department_id": 7}

Получаем ответ:

{
    "department_title": "Education Department"
} 

Сравниваем с ответом из пунктов 7 и 10. Видим, что всё хорошо.

18. Проверяем для пунктов 15, 16 и 17 невалидные данные: department: 8, position: 13, skill: 13

Во всех случаях получен ответ:

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or
	there is an error in the application.</p>

19. Заходим на сервер:
ssh test_31@23.88.52.139

20. Находим файлы w1.log, w2.log, w3.log, w4.log, w5.log:
find -name "w?.log"

21. Скачиваем их себе на компьюютер:
exit
scp test_31@23.88.52.139:/usr/t4_ws/t4/w1/w1.log w1.log
scp test_31@23.88.52.139:/usr/t4_ws/t4/w2/w2.log w2.log
scp test_31@23.88.52.139:/usr/t4_ws/t4/w3/w3.log w3.log
scp test_31@23.88.52.139:/usr/t4_ws/t4/w4/w4.log w4.log
scp test_31@23.88.52.139:/usr/t4_ws/t4/w5/w5.log w5.log

22. Выводим в файл logs.log только те запросы, в которых указан мой ip (и 10 строк вокруг него):
grep  -a -C10 "37.122.168.3" w?.log >logs.log

23. Открываем с помощью vim:
vim logs.log

24. Изучаем файл. 
Видим, что ошибок нет.