{
	"info": {
		"_postman_id": "e46ca22e-6302-40a7-8871-55ed365748a4",
		"name": "HW 1_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20481400"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"pm.environment.set(\"token\", resp_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Froska",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Anna2309",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/get_method?name=Froska&age=38",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Froska"
						},
						{
							"key": "age",
							"value": "38"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name=Froska&age=38&weight=55",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Froska"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "weight",
							"value": "55"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name=Froska&age=38&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Froska"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\" : \"Froska\",\r\n    \"age\" : 38,\r\n    \"salary\" : 1000,\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"Response name = Request name (hardcode)\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Froska\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"Response age = Request age (hardcode)\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"38\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"Response salary = Request salary (hardcode)\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"let req_Name = req.name\r",
							"pm.test(\"Response name = Request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_Name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"let req_Age = req.age\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_Age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"let req_Salary = + req.salary\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_Salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"resp_Family = \" , jsonData.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let resp_Salary_1_5 = 4*req.salary\r",
							"pm.test(\"u_salary_1_5_year = 4*request Salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(resp_Salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Froska",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject ();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"let req_Name = req.name\r",
							"pm.test(\"Response name = Request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_Name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"let req_Age = req.age\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_Age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"let req_Salary = + req.salary\r",
							"pm.test(\"Response salary = Request salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_Salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"resp_Family = \" , jsonData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"The dog has a name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.hasOwnProperty(\"name\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"The dog has an age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.hasOwnProperty(\"age\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name = Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age = 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Froska&age=38&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Froska"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject ();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"let req_Name = req.name\r",
							"pm.test(\"Response name = Request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_Name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"let req_Age = + req.age\r",
							"pm.test(\"Response age = Request age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_Age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = + req.salary\r",
							"console.log (\"req_salary = \" + req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = jsonData.salary\r",
							"console.log (\"resp_salary = \" + resp_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (\"resp_salary = \" + resp_salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (\"resp_salary = \" + resp_salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (\"resp_salary = \" + resp_salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response salary (1) = Request salary\", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let resp_salary_1 = + resp_salary[1]\r",
							"pm.test(\"Response salary (1) = Request salary\", function () {\r",
							"    pm.expect(resp_salary_1).to.eql(2*req_salary);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let resp_salary_2 = + resp_salary[2]\r",
							"pm.test(\"Response salary (1) = Request salary\", function () {\r",
							"    pm.expect(resp_salary_2).to.eql(3*req_salary);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 18. Передать в окружение переменную name\r",
							"let env_resp_name =jsonData.name\r",
							"pm.environment.set(\"name\", req_Name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_Age);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//вариант 1\r",
							"var salary_length = jsonData.salary.length;\r",
							"for (var i = 0; i < salary_length ; i++){\r",
							"    console.log (\"resp_salary\", i , \"=\" , resp_salary[i])\r",
							"}\r",
							"//вариант 2\r",
							"function MyFunction(value,index) {\r",
							"console.log(index + \" element: \" +value);\r",
							"}\r",
							"jsonData.salary.forEach (MyFunction)\r",
							"\r",
							"//вариант 3 без индекса зато легко\r",
							"jsonData.salary.forEach (i => console.log (i))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Froska&age=38&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Froska"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"JSON has a start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"start_qa_salary\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"JSON has a qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_6_months\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"JSON has a qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_12_months\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"JSON has a qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_1.5_year\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"JSON has a qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"qa_salary_after_3.5_years\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"JSON has a person\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"person\")).to.eql(true);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_Salary = + req.salary\r",
							"pm.test(\"Response start_qa_salary = Request salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req_Salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_6_months = Request salary * 2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(2*req_Salary);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_12_months = Request salary * 2,7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(2.7*req_Salary);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_1.5_year = Request salary * 3,3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(3.3*req_Salary);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_3.5_years = Request salary * 3,8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(3.8*req_Salary);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response first element of person.u_name = Request salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(req_Salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_Age = + req.age\r",
							"pm.test(\"Response u_age = Request age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(req_Age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Response u_salary_5_years = Request salary * 4,2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(4.2*req_Salary);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//вариант 1\r",
							"for (var [key, value] of Object.entries(jsonData.person)) {\r",
							"  console.log(`${key}: ${value}`);\r",
							"}\r",
							"\r",
							"//вариант 2\r",
							"for (let key_ in jsonData.person) {\r",
							"    console.log (key_, jsonData.person[key_]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}